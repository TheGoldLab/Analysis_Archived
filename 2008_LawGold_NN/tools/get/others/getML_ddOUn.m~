function [fits, sems] = getML_ddOUn(fname, recompute)
% get coh and time dependence of neurometric performance using OU model
% INPUTS:
%   fname - 'txt' filename

if ~isempty(findstr(fname, 'LIP'))
    dtype = 'LIP';

elseif ~isempty(findstr(fname, 'MT'))
    if ~isempty(findstr(fname, 'PRe'))
        dtype = 'MTPRe';
    else
        dtype = 'MT';
    end

else
    return;
end


savepath = ['/work/mirror_jeff/code/matlab/tmp-mat/getML_ddOUn_' fname(1:2) dtype '.mat'];



if recompute
    if strcmp(dtype, 'MT') | strcmp(dtype, 'MTPRe')
        d1name = 'ddir';
        ecname = 'dot_dir';

        % get cumulative spike rate for MT
        bb   = 0;
        be   = 1000;
        bw   = 25;
        bs   = 25;
        bins = [zeros(size([bb+bw:bs:be]')) [bb+bw:bs:be]'];
        mbins = (bins(:,2)-bw/2)/1000;
        crtf = [0 1];
        nvf  = [0 1];
        dirf = 0;
        [rM, rSD, rN, rMn] = getML_mRate(fname, bins, crtf, nvf, dirf, 0);
        CohD               = getML_SigNoise(fname,[0 1],[0 1],[0],0);  % use to estimate the bounds for drift rate
        CohD(2,:)          = [];


        % get average response before dots on
        a      = getML_txt(fname);
        fn     = a.data{strcmp(a.name,'dat_fn')};
        usable = a.data{strcmp(a.name,'usable')};
        uid    = a.data{strcmp(a.name,'uid')};
        d1     = a.data{strcmp(a.name,d1name)};
        tkflg  = a.data{strcmp(a.name,'taskflag')};

        coh         = [0 3.2 6.4 12.8 25.6 51.2 99.9]';
        m           = rM-rM([8:14 1:7], :, :);    % select between normalized and unnormalized spikes
        %sd          = rSD./(rN.^0.5);
        sd          = rSD./(rN.^0.5)+rSD([8:14 1:7], :, :)./(rN([8:14 1:7], :, :).^0.5);    % select between normalized and unnormalized spikes

        m(8:end,:,:)  = [];
        sd(8:end,:,:) = [];

        fits = nans(2,length(fn));
        sems = nans(2,length(fn));

        global FIRA
        for i = 1:length(fn)
            if usable(i) == 1
                fprintf('%d: %s\n', i, fn{i})

                % prepare data
                r  = m(:,:,i);
                rd = sd(:,:,i);
                t  = mbins;
                t  = repmat(t',length(coh),1);
                t  = t(:);
                c  = repmat(coh/100,1,length(bins));
                c  = c(:);
                data = [c t r(:) rd(:)];
                %data = [c t r(:)];


                % estimate initial conditions
                % first estimate A term, then use 50% and 150% of that value
                % as the lower and the upper bounds
                k0        = [CohD(i);       -0.00001];
                kl        = [0.5*CohD(i);   -20     ];
                ku        = [1.5*CohD(i);   -0.00001];
                tau       = 0.1;
                [fits(:,i),f,e,o,l,g,H] = fmincon('ddOUn_err', k0, [], [], [], [], ...
                    kl, ku, [], ...
                    optimset('LargeScale', 'off', 'Display', 'off', 'Diagnostics', 'off'), ...
                    data, tau);
                sems(:,i) = sqrt(diag(-((-H)^(-1))));

                % plot
                if 0
                    lc  = [];
                    for j = 1:7
                        lc = [lc; [0.9 0.9 0.9]-(j-1)/7];
                    end

                    clf
                    subplot(1,2,1)
                    hold on
                    for j = 1:length(coh)
                        plot(mbins, m(j,:,i).*mbins', '.', 'LineWidth', 2, 'MarkerEdgeColor', lc(j,:))
                        plot(mbins, ddOUn_val(fits(:,i),[repmat(coh(j)/100,length(mbins),1) mbins]), '-', 'LineWidth', 2, 'Color', lc(j,:))
                    end
                    hold off
                    title(sprintf('%.2f, %.2f, %.2f', fits(1,i), fits(2,i)))

                    subplot(1,2,2)
                    plot(coh/100, r(end-7+1:end), '.k')
                    lsline

                    pause
                end
            end
        end

        
        
    elseif strcmp(dtype, 'LIP')
        d1name = 'trg_dir';
        ecname = 'trg1_dir';

        % get LIP spike rate
        bb     = 0;
        be     = 1500;
        bs     = 25;
        bw     = 50;
        bins   = [[bb:bs:be-bw]' [bb+bw:bs:be]'];
        mbins  = mean(bins,2);
        crtf = [1];
        nvf  = [0 1];
        dirf = 0;
        [rM, rSD, rN, rMn] = getML_mRate(fname, bins, crtf, nvf, dirf, 0);
        on                 = getML_LIPModelroc(fname(1:2), 0);
        on                 = 1000*on(3,:);
        CohD               = 1000*getML_LIPModel(fname(1:2), 0, on);    % use to estimate the bounds for drift rate
        CohD               = 1000*CohD(3,:);


        % get average response before dots on
        a      = getML_txt(fname);
        fn     = a.data{strcmp(a.name, 'dat_fn')};
        usable = a.data{strcmp(a.name, 'usable')};
        uid    = a.data{strcmp(a.name, 'uid')};
        d1     = a.data{strcmp(a.name, d1name)};
        tkflg  = a.data{strcmp(a.name, 'taskflag')};

        coh         = [0 3.2 6.4 12.8 25.6 51.2 99.9]'/100;
        Lcoh        = [1 1 1 1 1 1 1];
        m           = rM-rM([8:14 1:7], :, :);    % select between normalized and unnormalized spikes
        %sd          = rSD./(rN.^0.5);
        sd          = rSD./(rN.^0.5)+rSD([8:14 1:7], :, :)./(rN([8:14 1:7], :, :).^0.5);    % select between normalized and unnormalized spikes

        m(8:end,:,:)  = [];
        sd(8:end,:,:) = [];

        fits = nans(2,length(fn));
        sems = nans(2,length(fn));

        global FIRA
        for i = 1:length(fn)
            if usable(i) == 1
                fprintf('%d: %s\n', i, fn{i})

                
                % fit LIP model
                if strcmp(fname(1:2), 'Cy')
                    if i==126 | i==112 | i==110 | i==106 | i==104 | i==103 | i==69
                        fitLength = 200;    % cyrus's time
                    else
                        fitLength = 275;    % cyrus's time
                    end
                elseif strcmp(fname(1:2), 'ZZ')
                    if i==87 | i==90 | i==91
                        fitLength = 175;    % zsa zsa's time
                    else
                        fitLength = 200;    % zsa zsa's time
                    end
                end


                if strcmp(fname(1:2),'Cy') % adjust onset time for these cells
                    if     i==89 | i==128 | i==122 | i==85 | i==24 ...
                            | i==138 | i==125 | i==116 ...
                            | i==113 | i==84 | i==49
                        init  = [];
                        on(i) =  on(i)+25;

                    elseif  i==64  | i==109 | i==70 | i==46 | i==1 | i==136 ...
                            | i==58 | i==146 | i==137  | i==130 | i==127 | i==59
                        init  = [];
                        on(i) =  on(i)+50;

                    elseif  i==96 | i==53 | i==114 | i==103 | i==97 | i==56 | i==30
                        init = [];
                        on(i) = on(i)+75;

                    elseif  i==76 | i==12 | i==142 ...
                            | i==124 | i==57 | i==19 | i==16
                        init  = [];
                        on(i) =  on(i)+100;

                    elseif i==52 | i==14
                        init = [];
                        on(i) = on(i)+150;

                    elseif i==140  | i==28 | i==123 | i==60 | i==45
                        init  = [];
                        on(i) =  on(i)+200;

                    elseif i==93 | i==43
                        init  = [];
                        on(i) =  on(i)+250;

                    elseif i==78 | i==90 | i==91 | i==107
                        init  = [];
                        on(i) =  on(i)+275;

                    elseif i==81
                        init  = [];
                        on(i) =  on(i)+300;

                    elseif i==104
                        init  = [];
                        on(i) =  on(i)+450;

                    elseif i==41 | i==131 | i==77
                        init = [];
                        on(i) = on(i)+500;

                    elseif i==51
                        init = [];
                        on(i) = on(i)+550;

                    elseif i==42 | i==35 | i==94 ...
                            | i==149 | i==82 | i==83 | i==126 | i==69
                        init  = [];
                        on(i) =  on(i)-25;

                    elseif i==147 | i==141 | i==110 | i==79
                        init  = [];
                        on(i) =  on(i)-50;

                    elseif i==22 | i==55 | i==66
                        init  = [];
                        on(i) =  on(i)-100;

                    elseif i==47 | i==4
                        init  = [];
                        on(i) =  on(i)-200;

                    else
                        init = [];
                    end
                end


                if strcmp(Monk,'ZZ')
                    if  i==6
                        init = [];
                        on(i) = on(i)-500;

                    elseif i==89 | i==35
                        init = [];
                        on(i) = on(i)-400;

                    elseif i==12 | i==62 | i==59 | i==51
                        init = [];
                        on(i) = on(i)-300;

                    elseif i==95
                        init = [];
                        on(i) = on(i)-250;

                    elseif i==32 | i==30 | i==74 | i==24 | i==43
                        init = [];
                        on(i) = on(i)-200;

                    elseif i==71 | i==25
                        init = [];
                        on(i) = on(i)-150;

                    elseif i==47 | i==26 | i==11
                        init = [];
                        on(i) = on(i)-100;

                    elseif i==70 | i==58 | i==52 | i==36 | i==22 | i==13 | i==90
                        init = [];
                        on(i) = on(i)-50;

                    elseif i==69
                        init = [];
                        on(i) = on(i)-25;

                    elseif i==49
                        init = [];
                        on(i) = on(i)+650;

                    elseif i==1 | i==53
                        init = [];
                        on(i) = on(i)+600;

                    elseif i==48
                        init = [];
                        on(i) = on(i)+400;

                    elseif i==64 | i==56 | i==42
                        init = [];
                        on(i) = on(i)+300;

                    elseif i==45 | i==20 | i==57 | i==10 | i==82
                        init = [];
                        on(i) = on(i)+200;

                    elseif i==9
                        init = [];
                        on(i) = on(i)+325;

                    elseif i==77 | i==86 | i==37
                        init = [];
                        on(i) = on(i)+150;

                    elseif i==86
                        init = [];
                        on(i) = on(i)+175;

                    elseif i==16 | i==67 | i==39 | i==91 | i==92
                        init  = [];
                        on(i) = on(i)+100;

                    elseif i==79 | i==88 ...
                            | i==72 | i==66 | i==8 | i==87 | i==93
                        init  = [];
                        on(i) = on(i)+50;

                    elseif i==76  | i==81 ...
                            | i==50 | i==85
                        init  = [];
                        on(i) = on(i)+25;

                    else
                        init = [];
                    end
                end
                
                
                % prepare data
                ot    = on(i)-mod(on(i),25);
                LP    = mbins>=ot & mbins<=ot+fitLength;
                t     = mbins(LP);
                t     = repmat(t',sum(Lcoh),1);
                t     = t(:)/1000;
                c     = repmat(coh(Lcoh),1,sum(LP));
                c     = c(:);
                r     = m(Lcoh,LP,i);
                rd    = sd(Lcoh,LP,i);
                r     = r(:);
                rd    = rd(:);
                data = [c t r(:) rd(:)];
                

                % estimate initial conditions
                % first estimate A term, then use 50% and 150% of that value
                % as the lower and the upper bounds
                k0        = [CohD(i);       -0.00001];
                kl        = [0.5*CohD(i);   -20     ];
                ku        = [1.5*CohD(i);   -0.00001];
                tau       = ot/1000;
                [fits(:,i),f,e,o,l,g,H] = fmincon('ddOUn_err', k0, [], [], [], [], ...
                    kl, ku, [], ...
                    optimset('LargeScale', 'off', 'Display', 'off', 'Diagnostics', 'off'), ...
                    data, tau);
                sems(:,i) = sqrt(diag(-((-H)^(-1))));

                % plot
                if 0
                    lc  = [];
                    for j = 1:7
                        lc = [lc; [0.9 0.9 0.9]-(j-1)/7];
                    end

                    clf
                    hold on
                    for j = 1:length(coh)
                        plot(mbins, m(j,:,i), '.', 'LineWidth', 2, 'MarkerEdgeColor', lc(j,:))
                        plot(mbins(LP)/1000, ddOUn_val(fits(:,i),[repmat(coh(j)/100,sum(LP),1) mbins(LP)/1000]), '-', 'LineWidth', 2, 'Color', lc(j,:))
                    end
                    hold off
                    title(sprintf('%.2f, %.2f, %.2f', fits(1,i), fits(2,i)))

                    pause
                end
            end
        end

    end


    save(savepath, 'fits', 'sems')
else

    load(savepath)
end
