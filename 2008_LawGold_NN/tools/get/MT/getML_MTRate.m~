function [mTR, sdTR, nTR, mPR, sdPR, nPR] = getML_MTRate(monk, recompute)
% DESCRIPTION:
%  Get average rate for MT neurons for each stimulus conditions.
%  There are in total 13 stimulus conditions: 6 for each coh at the pref dir,
%  6 for each coh at the null dir, and 0% coh for both dir.
%
% OUTPUT:
%  Each of the following output are mxn matrix, where m is the number of
%  coh and n is the number of cell. 
%  mTR  - mean for neurons recorded during training
%  sdTR - sd for neurons recorded during training
%  nTR  - number of trials
%  mPR  - mean for neurons recorded before training
%  sdPR - sd for neurons recorded before training
%  nPR  - number of trials





if findstr('PRe', fname)
    savepath = ['/work/mirror_jeff/code/matlab/tmp-mat/getML_MTRate_' monk '_PRE.mat'];
else
    savepath = ['/work/mirror_jeff/code/matlab/tmp-mat/getML_MTRate_' monk '.mat'];
end    
    
if recompute
    % pre-training
    a      = getML_txt([monk 'PRe_MT.txt']);
    fn     = a.data{strcmp(a.name,'dat_fn')};
    usable = a.data{strcmp(a.name,'usable')};
    uid    = a.data{strcmp(a.name,'uid')};
    d1     = a.data{strcmp(a.name,'ddir')};

    mPR    = nans(13, length(fn));
    sdPR   = nans(13, length(fn));
    nPR    = nans(13, length(fn));
    
    sig   = nans(2,length(fn));
    fano  = nans(2,length(fn));

    warning off
    global FIRA
    for i = 1:length(fn)
        if usable(i) == 1;
            openFIRA(fn{i})
            fprintf('%s\n',fn{i})

            
            % get mean rate from dots_on to dots_off
            % selection arrays for coherences
            [Lcoh, Ucoh] = selectFIRA_trialsByUniqueID('dot_coh');
            Lcoh = Lcoh(:, ismember(Ucoh, [0 3.2 6.4 12.8 25.6 51.2 99.9])); % remove strange coh other than the standard cohs
            Ucoh = Ucoh(ismember(Ucoh, [0 3.2 6.4 12.8 25.6 51.2 99.9]));    % in one pre-training file there's a 9% coh condition

            % selection arrays for direction
            [Ldir, Udir] = selectFIRA_trialsByUniqueID('dot_dir');
            Idir         = [find(round(Udir)==d1(i)) find(round(Udir)==mod(d1(i)+180,360))];
            if dirf  % if neccessary, convert to by choice
                for j = 1:size(Idir)
                    L = ~isnan(FIRA.ecodes.data(:,getFIRA_ecodeColumnByName('correct')));
                    Ldir(L,Idir(j)) = ~xor(Ldir(L,Idir(j)), FIRA.ecodes.data(L,getFIRA_ecodeColumnByName('correct')));
                end
            end

            % selection arrays for task
            [Ltk, Utk]  = selectFIRA_trialsByUniqueID('task');
            Ltk = ismember(getFIRA_ecodesByName('task','id'), [3,6]);

            % selection array for correct/incorrect
            Lcrt =  ismember(getFIRA_ecodesByName('correct', 'id'), crtf);
            
            % get selection array for mean rates
            L = zeros(length(Ldir), 14);
            c = [0 3.2 6.4 12.8 25.6 51.2 99.9];
            for j = 1:7
                if ismember(c(j),Ucoh)
                    L(:,j)   = Ldir(:,Idir(1)) & Lcoh(:,Ucoh==c(j)) & Ltk & Lcrt;
                    L(:,j+7) = Ldir(:,Idir(2)) & Lcoh(:,Ucoh==c(j)) & Ltk & Lcrt;
                end
            end

            % get rate
            for j = 1:14
                r = getFIRA_rate(L(:,j), getFIRA_spikeByID(uid(i)), ... 
                                    getFIRA_ecodeTimesByName('dot_on', 0), ...
                                    getFIRA_ecodeTimesByName('dot_off', 0));
                rM(j)  = nanmean(r);
                rN(j)  = sum(~isnan(r));
                rSD(j) = nanstd(r);
            end
            
            
            % get signal (or response to coherence function)
            m     = rM(1:7)-rM(8:14);
            sd    = (rSD(1:7)./(rN(1:7).^0.5)) + (rSD(8:14)./(rN(8:14).^0.5));
            coh   = [0 0.032 0.064 0.128 0.256 0.512 0.999]';

            % fit a straight line to MT responses (pref-null)
            Lgd = ~isnan(m);
            if sum(Lgd)>2
                [b be] = regressW(m(Lgd), sd(Lgd), [coh(Lgd)]);
                sig(:,i) = [b; be(2)-b];
            end
            
            % get fano factor
            Lgd = ~isnan(rM);
            if sum(Lgd)>2
                [b be] = regressW(rSD(Lgd).^2, 1./(rN(Lgd).^0.5), rM(Lgd));
                fano(:,i) = [b; be(2)-b];
            end           
        end
    end
    warning on
    
    save(savepath, 'sig', 'fano')
else

    load(savepath)
end



